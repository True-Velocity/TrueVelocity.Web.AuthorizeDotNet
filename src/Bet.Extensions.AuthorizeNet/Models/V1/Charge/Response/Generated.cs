// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Bet.Extensions.AuthorizeNet.Models.V1.Charge.Response;
//
//    var chargeTransactionResponse = ChargeTransactionResponse.FromJson(jsonString);

namespace Bet.Extensions.AuthorizeNet.Models.V1.Charge.Response
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;

    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class ChargeTransactionResponse
    {
        [JsonProperty("transactionResponse")]
        public TransactionResponse TransactionResponse { get; set; }

        [JsonProperty("messages")]
        public Messages Messages { get; set; }
    }

    public partial class Messages
    {
        [JsonProperty("resultCode")]
        public string ResultCode { get; set; }

        [JsonProperty("message")]
        public MessagesMessage[] Message { get; set; }
    }

    public partial class MessagesMessage
    {
        [JsonProperty("code")]
        public string Code { get; set; }

        [JsonProperty("text")]
        public string Text { get; set; }
    }

    public partial class TransactionResponse
    {
        [JsonProperty("responseCode")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long ResponseCode { get; set; }

        [JsonProperty("authCode")]
        public string AuthCode { get; set; }

        [JsonProperty("avsResultCode")]
        public string AvsResultCode { get; set; }

        [JsonProperty("cvvResultCode")]
        public string CvvResultCode { get; set; }

        [JsonProperty("cavvResultCode")]
        public string CavvResultCode { get; set; }

        [JsonProperty("transId")]
        public string TransId { get; set; }

        [JsonProperty("refTransID")]
        public string RefTransId { get; set; }

        [JsonProperty("transHash")]
        public string TransHash { get; set; }

        [JsonProperty("testRequest")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long TestRequest { get; set; }

        [JsonProperty("accountNumber")]
        public string AccountNumber { get; set; }

        [JsonProperty("accountType")]
        public string AccountType { get; set; }

        [JsonProperty("messages")]
        public TransactionResponseMessage[] Messages { get; set; }

        [JsonProperty("transHashSha2")]
        public string TransHashSha2 { get; set; }

        [JsonProperty("SupplementalDataQualificationIndicator")]
        public long SupplementalDataQualificationIndicator { get; set; }

        [JsonProperty("networkTransId")]
        public string NetworkTransId { get; set; }
    }

    public partial class TransactionResponseMessage
    {
        [JsonProperty("code")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Code { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }
    }

    public partial class ChargeTransactionResponse
    {
        public static ChargeTransactionResponse FromJson(string json) => JsonConvert.DeserializeObject<ChargeTransactionResponse>(json, Bet.Extensions.AuthorizeNet.Models.V1.Charge.Response.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this ChargeTransactionResponse self) => JsonConvert.SerializeObject(self, Bet.Extensions.AuthorizeNet.Models.V1.Charge.Response.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
