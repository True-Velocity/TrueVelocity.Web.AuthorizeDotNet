// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Bet.Extensions.AuthorizeNet.Models.V1.Refund.Request;
//
//    var refuncTransactionRequest = RefuncTransactionRequest.FromJson(jsonString);

namespace Bet.Extensions.AuthorizeNet.Models.V1.Refund.Request
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;

    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class RefundTransactionRequest
    {
        [JsonProperty("createTransactionRequest")]
        public CreateTransactionRequest CreateTransactionRequest { get; set; }
    }

    public partial class CreateTransactionRequest
    {
        [JsonProperty("merchantAuthentication")]
        public MerchantAuthentication MerchantAuthentication { get; set; }

        [JsonProperty("refId")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long RefId { get; set; }

        [JsonProperty("transactionRequest")]
        public TransactionRequest TransactionRequest { get; set; }
    }

    public partial class MerchantAuthentication
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("transactionKey")]
        public string TransactionKey { get; set; }
    }

    public partial class TransactionRequest
    {
        [JsonProperty("transactionType")]
        public string TransactionType { get; set; } = "refundTransaction";

        [JsonProperty("amount")]
        public string Amount { get; set; }

        [JsonProperty("payment")]
        public Payment Payment { get; set; }

        [JsonProperty("refTransId")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long RefTransId { get; set; }
    }

    public partial class Payment
    {
        [JsonProperty("creditCard")]
        public CreditCard CreditCard { get; set; }
    }

    public partial class CreditCard
    {
        [JsonProperty("cardNumber")]
        public string CardNumber { get; set; }

        [JsonProperty("expirationDate")]
        public string ExpirationDate { get; set; }
    }

    public partial class RefundTransactionRequest
    {
        public static RefundTransactionRequest FromJson(string json) => JsonConvert.DeserializeObject<RefundTransactionRequest>(json, Bet.Extensions.AuthorizeNet.Models.V1.Refund.Request.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this RefundTransactionRequest self) => JsonConvert.SerializeObject(self, Bet.Extensions.AuthorizeNet.Models.V1.Refund.Request.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
